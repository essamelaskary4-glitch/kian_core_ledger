import ees_core_v1_0 as ees
import json
import time

# =================================================================
# SMCE-Executor Module V1.1 (Fixed Logic)
# ูุญุฏุฉ ุงูุชูููุฐ ุงููููุฌู - ุชูุนูู ุงูุงูุชูุงู ุฅูู RCM
# =================================================================

def fetch_last_self_allocation_approved():
    """
    ุงุณุชุฑุฌุงุน ุขุฎุฑ ุฃูุฑ SELF_ALLOCATION ุชู ุงูููุงููุฉ ุนููู (SER_APPROVED).
    ูุชู ุชุฌุงูู ุฃูุงูุฑ CORE_REVERT ูุงูุงูุงูุฑ ุงููุฑููุถุฉ.
    :return: ูุงููุณ ูุญุชูู ุนูู ุงูุญูููุฉ (Payload) ุฃู None.
    """
    # ุงุณุชุฑุฌุงุน ุขุฎุฑ 10 ุณุฌูุงุช ูุชูููู ุฒูู ุงูุจุญุซ (ูููู ุฒูุงุฏุชู ุฅุฐุง ูุฒู ุงูุฃูุฑ)
    # ููุงุญุธุฉ: ุฏุงูุฉ get_ledger_contents ุชู ุชุนุฏูููุง ูู ees_core_v1_0.py ูุฏุนู limit=None
    records = ees.get_ledger_contents(limit=10)
    
    # ุงูุจุญุซ ุนู ุขุฎุฑ ุณุฌู SELF_ALLOCATION ุชู ุงูููุงููุฉ ุนููู
    for record in records:
        if record['event_type'] == 'SELF_ALLOCATION':
            # ุงูุชุญูู ูู ุฃู ุงููุชูุฌุฉ ูู SER_APPROVED
            if 'Result: SER_APPROVED' in record['data_payload']:
                # ุงุณุชุฎูุงุต ุงูุญูููุฉ (Payload) ูู ุญูู data_payload
                # ูุชู ูุตู ุงูุญูููุฉ ุนู ุญูู ุงููุชูุฌุฉ (Result) ุงููุถุงู ูู ees_core
                try:
                    # ุงูุญูููุฉ ุชููู ูู ุงูุฌุฒุก ุงูุฃูู ูุจู ", Result: "
                    payload_str = record['data_payload'].split(', Result: ')[0]
                    # ุชุญููู ุงูุญูููุฉ JSON ุฅูู ูุงููุณ Python
                    return json.loads(payload_str)
                except (json.JSONDecodeError, IndexError) as e:
                    # ุฅุฐุง ูุดู ุงูุชุญูููุ ููุชูู ููุณุฌู ุงูุณุงุจู
                    print(f"โ ุฎุทุฃ ูู ุชุญููู ุงูุญูููุฉ (ID: {record.get('id')}): {e}. ูุชู ุชุฌุงูู ูุฐุง ุงูุณุฌู.")
                    continue
                    
    return None

def execute_self_allocation():
    """ุชูููุฐ ุงููููุฉ ุงูููุงูู ุนูููุง ูุฅุทูุงู ุฏูุฑุฉ RCM."""
    print("--- SSE-Core: SMCE Executor - ุจุฏุฃ ุงูุชูููุฐ ุงููููุฌู ูุญุฏุฉ ---")
    
    # ุงุณุชุฎุฏุงู ุงูุฏุงูุฉ ุงูููุนุฏูููุฉ ูุฌูุจ ุงูุฃูุฑ ุงููุนุชูุฏ ููุท
    approved_project = fetch_last_self_allocation_approved()

    if approved_project:
        project_type = approved_project.get("project_type", "UNKNOWN")
        cost = approved_project.get("cost", 0.00)
        
        print(f"โ ุงูุชูููุฐ ุจุฏุฃ: ุชู ุงูุนุซูุฑ ุนูู ุฃูุฑ SELF ALLOCATION ููุนุชูุฏ")
        print(f"โ ุงููุดุฑูุน ููุน : {project_type}")
        print(f"โ ุงูููุฑุฉ ุงูุชูููุฉ : {cost:.2f}$")

        # ุชุณุฌูู ุจุฏุก ุงูุชูููุฐ ูู ุงูุณุฌู ุงูุฃุจุฏู
        ees.record_and_hash_event("EXECUTION_START", f"Project: {project_type}", "SUCCESS")
        
        # ุงูุงูุชูุงู ุฅูู ูุญุฏุฉ RCM
        print("--- ุงูุฃุจุฏู ุงูุฎูู (ูุญุฏุฉ RCM) ุฅูู ุงูุงูุชูุงู : ูุฌุงุญ ---")
        ees.record_and_hash_event("RCM_TRANSITION", f"Project: {project_type}", "SUCCESS")
        
        # ููุงุญุธุฉ: ูู ุงููุดุฑูุน ุงููุงููุ ุณูุชู ููุง ุงุณุชุฏุนุงุก rcm_module.py ูุนููุงู
        
    else:
        print("โ ุงูุชูููุฐ ูู ูุจุฏุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃูุฑ SELF ALLOCATION ููุนุชูุฏ ููุชูููุฐ.")
        print("๐ก ุงูุชุบุฐูุฉ ุงูุฑุงุฌุนุฉ: ูุฌุจ ุชุดุบูู ser_analyzer.py ููุญุตูู ุนูู ูุฑุงุฑ ูุนุชูุฏ.")
    
    print("--- ุงูุชูุช ูุญุฏุฉ ุงูุชูููุฐ ุงููููุฌู ---")


if __name__ == '__main__':
    execute_self_allocation()