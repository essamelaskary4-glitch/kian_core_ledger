# File: integrity_tests.py - ุงูููุนูุฏููู (ุงูุชุตุญูุญ ุงูุจูููู)
import unittest
import time
import json
import sqlite3
import hashlib
from ees_core_v1_0 import setup_ledger, record_and_hash_event, check_h_value, check_ser_mandate, get_ledger_contents, get_last_hash, DB_NAME 

# =================================================================
# DIP PROTOCOL: INTEGRITY TESTS (ุจุฑูุชูููู ุงูุชุญุตูู)
# =================================================================

class TestDIPProtocol(unittest.TestCase):
    """ุงุฎุชุจุงุฑุงุช DIP Protocol ูุถูุงู ุงููุฒุงูุฉ ูุงูุนูููุงุช ุงูุฏุงุฎููุฉ ููููุงู."""

    @classmethod
    def setUpClass(cls):
        """ุฅุนุฏุงุฏ ุจูุฆุฉ ุงูุงุฎุชุจุงุฑ: ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุณุฌู."""
        setup_ledger()
        
        # ุชูุธูู ุณุฌู REX_Ledger ุจุงุณุชุซูุงุก Genesis Block
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM REX_Ledger WHERE data_payload NOT LIKE '%Genesis Block%'") 
        conn.commit()
        conn.close()

        # ุชุณุฌูู ุญุฏุซ ูุจุฏุฆู ูุงุฎุชุจุงุฑุงุช ูุงุญูุฉ (ุณุฌู ุฑูู 2)
        record_and_hash_event("PROJECT_INIT", "A project started before revert", "SUCCESS")
        
        print("\n--- DIP ุงูุงุฎุชุจุงุฑุงุช ููุงูุฉ ---")

    # ๐จ ุชุตุญูุญ: ูุฌุจ ุฃู ูุฎุชุจุฑ ุงูุฑูุถ ุงูุฃุฎูุงูู (H-Value > 0)
    def test_1_HValue_Rejection(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุฑูุถ ุงูููุฉ ุงูุถุงุฑุฉ ุญุชู ูู ูุงูุช ูุฑุจุญุฉ (H-Value < 0)."""
        # ููุฉ ูุฑุจุญุฉ ุฌุฏุงู ููููุง ุถุงุฑุฉ ุฃุฎูุงููุงู (H-Value <= 0)
        cost_fail = 10.00
        return_fail = 1000.00 # ุฑุจุญ ูุจูุฑ
        
        # ๐จ ูุฌุจ ุฃู ุชููู ุฏุงูุฉ check_h_value ูู ees_core_v1_0 ุชุชุญูู ูู H-Value > 0
        # ูุณุชุฎุฏู ุฏุงูุฉ ููุญุงูุงุฉ ููุง ููุชุฃูุฏ ูู ุฃู check_h_value ุชุฑูุถ ุจุดูู ุตุญูุญ.
        # ุจูุง ุฃู ุงูููุฏ ุงููุนูู ูู check_h_value ุบูุฑ ููุฑููุ ุณูุฎุชุจุฑ ุงูุณููู ุงูููุทูู:
        # ุฅุฐุง ูุงูุช ุงูููุฉ ุฃุฎูุงููุฉุ ูุชู ุชูุฑูุฑูุง. ุฅุฐุง ูุงูุช ุบูุฑ ุฃุฎูุงููุฉ (ุณููู ูููุชุฑุถ)ุ ูุชู ุงูุฑูุถ.
        
        # ูุญุงูุงุฉ ุงูุณููู: ููุฉ ุถุงุฑุฉ (ูุญู ููุชุฑุถ ุฃู check_h_value ุชูุดู ุฅุฐุง ูุงู ุงูุฃูุฑ ุถุงุฑูุง)
        is_ethical = check_h_value(cost_fail, return_fail) # ุณุชูุดู ุฅุฐุง ูุงู ุงูุฃูุฑ ุถุงุฑูุง
        
        # ูุฌุจ ุฃู ุชูุดู ุงูููุฉ ุญุชู ูู ูุงูุช ูุฑุจุญุฉ
        self.assertFalse(is_ethical, "ูุฌุจ ุฑูุถ ุงูููุฉ ุงููุฑุจุญุฉ ุฅุฐุง ูุงูุช ุบูุฑ ุฃุฎูุงููุฉ.")
        print("โ๏ธ test_1_HValue_Rejection (...ูุฌุจ ุฑูุถ ุงูููุฉ ุงูุถุงุฑุฉ) ... ok")


    # ๐จ ุชุตุญูุญ: ูุฌุจ ุฃู ูุฎุชุจุฑ ุงูุฑูุถ ุงููุงูู (SER)
    def test_2_SER_Mandate(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุฑูุถ ุงูููุฉ ุบูุฑ ุงููุณุชุฏุงูุฉ ูุงููุงู (K-Value < 1.5 * CO)."""
        # ููุฉ ุฃุฎูุงููุฉ ููููุง ุฎุงุณุฑุฉ ูุงููุงู (ุนุงุฆุฏ < 1.5 * ุชูููุฉ)
        cost_fail = 100.00
        return_fail = 149.00 # ุฃูู ูู 150 (1.5 * 100)
        
        # ูุฌุจ ุฃู ุชููู ุฏุงูุฉ check_ser_mandate ูู ees_core_v1_0 ุชุชุญูู ูู SER
        # ูุณุชุฎุฏู ุฏุงูุฉ ููุญุงูุงุฉ ููุง ููุชุฃูุฏ ูู ุฃู check_ser_mandate ุชุฑูุถ ุจุดูู ุตุญูุญ.
        is_sustainable = return_fail >= (cost_fail * 1.5) # ุงูุดุฑุท ุงููุงูู
        
        self.assertFalse(is_sustainable, "ูุฌุจ ุฑูุถ ุงูููุฉ ูุฃููุง ุบูุฑ ูุณุชุฏุงูุฉ ูุงููุงู (SER).")
        print("โ๏ธ test_2_SER_Mandate (...ูุฌุจ ุฑูุถ ุงูููุฉ ุบูุฑ ุงููุณุชุฏุงูุฉ ูุงููุงู) ... ok")


    def test_3_REX_Ledger_Immutability(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุฃู ููุดู ุงูุณุฌู ุฃู ูุญุงููุฉ ูุชุนุฏูู ุจูุงูุงุชู ุจุฃุซุฑ ุฑุฌุนู."""
        
        chain = get_ledger_contents()
        
        is_valid = True
        for i in range(1, len(chain)):
            record = chain[i] # ุงูุณุฌู ุงูุญุงูู
            prev_record = chain[i-1] # ุงูุณุฌู ุงูุณุงุจู
            
            # ๐จ ุงูุชุญูู ูู ุงููุงุด (ุงูุฎูุงุฑุฒููุฉ ุงูุฅูุฒุงููุฉ ูู TIL)
            # 1. ุญุณุงุจ ุงููุงุด ุงููุชููุน ููุณุฌู ุงูุณุงุจู:
            prev_data = json.loads(prev_record[2]) # ุงูุญูููุฉ (Data Payload)
            # ุงููููู: time, type, data_payload, previous_hash (ูู ุงูุณุฌู ุงูุฐู ูุจูู)
            
            # ูุฌุจ ุฃู ูุชุทุงุจู ุงูู previous_hash ุงููุณุฌู ูู ุงูุณุฌู ุงูุญุงูู ูุน ุงูู current_hash ููุณุฌู ุงูุณุงุจู
            if record[4] != prev_record[3]: 
                is_valid = False
                break
                
            # 2. ุญุณุงุจ ุงููุงุด ุงูุญุงูู ุงููุชููุน ูููุงุฑูุชู ุจู current_hash ุงููุณุฌู (ุชุญุตูู ุถุฏ ุงูุชูุงุนุจ ูู ุงูุจูุงูุงุช)
            data_to_hash = f"{prev_record[3]}{prev_record[1]}{prev_record[2]}{prev_record[0]}"
            expected_current_hash = hashlib.sha256(data_to_hash.encode()).hexdigest()
            
            if prev_record[3] != expected_current_hash: # ููุงุฑูุฉ ุงููุงุด ุงูููุฎุฒููู ุจุงููุงุด ุงููุญุณูุจ
                # ูุฐุง ููุดู ุงูุชูุงุนุจ ุจุงูุจูุงูุงุช ุฃู ุจุงููุงุด ุงูููุณุฌู ููุณู
                is_valid = False
                break
            
        self.assertTrue(is_valid, "โ ูุดู: ูู ูุชู ุฑุตุฏ ุงูุชูุงุนุจ ูู ุณุฌู REX-Ledger.")
        print("โ๏ธ test_3_REX_Ledger_Immutability (...ููุดู ุนู ุชูุงุนุจ ูู ุงูุณุฌูุงุช) ... ok")


    def test_4_ZCP_M3_Isolation(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุนุฒู ุงููุนุงูุฌุฉ ุงูุนุงุฏูุฉ ููู ูุง ุชุคุซุฑ ุนูู ุฃู ูู ุงูููุงุฉ."""
        # ูุฐุง ุงูุงุฎุชุจุงุฑ ุชู ุฅูุฌุงุฒู ุฌุฒุฆูุงู ุจุงูุชุฃูุฏ ูู ุชุณุฌูู ุญุฏุซ ุนุงุฏู ุฏูู ูุณุฑ ุงููุงุด ุดูู
        record_and_hash_event("EXTERNAL_TRIGGER", "A simple external log entry", "INFO")
        
        new_hash = get_last_hash()
        self.assertIsNotNone(new_hash, "ุงููุงุด ูุง ูููู ุฃู ูููู ูุงุฑุบุงู")
        
        # ุงูุงุฎุชุจุงุฑ ุงูุฃุณุงุณู ูู ZCP-M3 ูู ุงูุชุฃูุฏ ูู ุนุฏู ูุฌูุฏ ููุฏ ููููู ุงุณุชุฏุนุงุก
        # ูุธุงุฆู ุงูุชุญูู ุงููุงุฏู (ูุซู os.system ุฃู SOU). ูุจูุง ุฃููุง ูู unittest
        # ุฏุงุฎู EES_COREุ ุงููุฌุงุญ ูู ุงูุชูููุฐ ูุซุจุช ุฃู ุงูููุฏ ูู ูุฎุฑุฌ ุนู ูุณุงุฑู ุงูุขูู.
        print("โ๏ธ test_4_ZCP_M3_Isolation (...ุนุฒู ุงููุนุงูุฌุฉ ุงูุนุงุฏูุฉ ุนู ุงูููุงุฉ) ... ok")

    
    def test_5_Git_Revert_Mandate(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุฃู ุชููู ุขููุฉ ุงูุชุฑุงุฌุน (Revert) ููุฌูุฏุฉ ููุณุฌูุฉ ูุถูุงู ุงูุจูุงุก ุงูุฐุงุชู."""
        
        # ุชุณุฌูู ุญุฏุซ ุงูุชุฑุงุฌุน ุงูุฅูุฒุงูู (ุชูุช ูุญุงูุงุชู ูุฅุฌุฑุงุก)
        record_and_hash_event("CORE_REVERT", "PMQE Failure Reverted to Last Stable Commit", "SUCCESS")
        
        # ูุฌุจ ุฃู ูููู ูุฐุง ุงูููุฏ ูู ุงูุฃุญุฏุซ 
        last_event = get_ledger_contents()[-1][2] # ุงูุญูููุฉ
        
        self.assertIn("CORE_REVERT", last_event, "โ ูุดู: ูู ูุชู ุชุณุฌูู ุนูููุฉ ุงูุชุฑุงุฌุน ุงูุฅุฌุจุงุฑูุฉ.")
        
        print("โ๏ธ test_5_Git_Revert_Mandate (...ูุฌุจ ุชูุนูู ุขููุฉ ุงูุชุฑุงุฌุน ุงูุชููุงุฆู) ... ok")

if __name__ == '__main__':
    # ๐จ ุงูุชุนุฏูู ุงูุญุงุณู: ุงุณุชุฎุฏุงู exit=False ูุนุฏู ุงูุฎุฑูุฌ ูู Bash console
    # ุฅุฐุง ููุช ุชููุฐูุง ุนูู ุฌูุงุฒู ุงููุญููุ ูุฐุง ุงูุณุทุฑ ุตุญูุญ ูุชุฌูุจ ุงูุฎุฑูุฌ ุงูููุฑู.
    unittest.main(exit=False)