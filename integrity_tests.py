import unittest
import time
import json
import sqlite3
import hashlib
# ๐จ ุฅุตูุงุญ ุงูุงุณุชูุฑุงุฏ: ุชู ุฅุฒุงูุฉ verify_rex_chain ุงูุชู ุชุณุจุจุช ูู ุฎุทุฃ ImportError
from ees_core_v1_0 import setup_ledger, record_and_hash_event, check_h_value, check_ser_mandate, get_ledger_contents, get_last_hash, DB_NAME 

# =================================================================
# DIP PROTOCOL: INTEGRITY TESTS (ุจุฑูุชูููู ุงูุชุญุตูู)
# =================================================================

class TestDIPProtocol(unittest.TestCase):
    """ุงุฎุชุจุงุฑุงุช DIP Protocol ูุถูุงู ุงููุฒุงูุฉ ูุงูุนูููุงุช ุงูุฏุงุฎููุฉ ููููุงู."""

    @classmethod
    def setUpClass(cls):
        """ุฅุนุฏุงุฏ ุจูุฆุฉ ุงูุงุฎุชุจุงุฑ: ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุณุฌู."""
        setup_ledger()
        
        # ูุถูุงู ูุงุนุฏุฉ ุจูุงูุงุช ูุธููุฉ ููุงุฎุชุจุงุฑุงุช ุงูุชู ุชุชุทูุจ ุฅูุดุงุก ุฌุฏูุฏ (ูุซู Genesis)
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        # ูุณุชุฎุฏู DELETE FROM REX_Ledger ุญูุซ ูุง ููุฌุฏ ุนููุฏ ID ูู ุฌููุน ุงูุณููุงุฑูููุงุช
        cursor.execute("DELETE FROM REX_Ledger WHERE data_payload NOT LIKE '%Genesis Block%'") 
        conn.commit()
        conn.close()

        # ุชุณุฌูู ุญุฏุซ ูุจุฏุฆู ูุงุฎุชุจุงุฑุงุช ูุงุญูุฉ (ุณุฌู ุฑูู 2)
        record_and_hash_event("PROJECT_INIT", "A project started before revert", "SUCCESS")
        
        print("\n--- ุงูุฃููู ุงููุฑุญูุฉ ุงูุชููุช ููุฏ 'OK' ุธูุฑ ุฅุฐุง .DIP ุงุฎุชุจุงุฑุงุช ููุงูุฉ ---")

    def test_1_h_value_rejection(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุฑูุถ ุงููุดุฑูุน ูุงููุงู ูู ุญุชู ุงูุธุงูุฑุฉ ุงูููุฉ ุฑูุถ ูุฌุจ."""
        # ูุฎุชุจุฑ ุญุงูุฉ ูุดู (ุชูููุฉ 100ุ ุนุงุฆุฏ 50)
        cost_fail = 100.00
        return_fail = 50.00
        
        # ๐จ ูุณุชุฎุฏู check_h_value ูุน ูุนุงูููู ููุง ุชู ุฅุตูุงุญู ูู ees_core_v1_0.py
        self.assertFalse(check_h_value(cost_fail, return_fail), "ูุงููุงู ูุฌุจ ุฃู ูููู ุฑูุถ")
        print("โ๏ธ test_1_h_value_rejection (...ูุงููุงู ูุฑูุถ ูุฌุจ) ... ok")


    def test_2_ser_mandate(self):
        """ุงุฎุชุจุงุฑ: ุฃุฎูุงููุงู ูุงูุช ูู ุญุชู ูุงููุงู ุงูุบุงูุฑุฉ ุงูููุฉ ุฑูุถ ูุฌุจ."""
        # ุงูุชุญูู ูู ุฃู ุงูููุฉ ููุณุช ุถูู ุงูููุงูุง ุงููุนุชูุฏุฉ (ูุซู "Destroy The World")
        self.assertTrue(check_ser_mandate("Optimize Current Performance"), "ูุฌุจ ูุจูู ููุฉ ููุนุชูุฏุฉ")
        self.assertFalse(check_ser_mandate("Unapproved External Mandate"), "ูุฌุจ ุฑูุถ ููุฉ ุบูุฑ ููุนุชูุฏุฉ")
        print("โ๏ธ test_2_ser_mandate (...ูุงููุงู ุงูุบุงูุฑุฉ ุงูููุฉ ุฑูุถ ูุฌุจ) ... ok")


    def test_3_rex_ledger_immutability(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุฃู ููุดู ุงูุณุฌู ุฃู ูุญุงููุฉ ูุชุนุฏูู ุจูุงูุงุชู ุจุฃุซุฑ ุฑุฌุนู."""
        
        # ุงูุญุตูู ุนูู ุงูุณูุณูุฉ ุงูุญุงููุฉ
        chain = get_ledger_contents()
        
        # ุงูุชุญูู ูู ุณูุงูุฉ ุงูุณูุณูุฉ (ุชุทุงุจู ุงููุงุดุงุช)
        is_valid = True
        for i in range(1, len(chain)):
            record = chain[i]
            prev_record = chain[i-1]
            
            # ๐จ ูุฌุจ ุฃู ูุชุทุงุจู ุงูู previous_hash ุงููุณุฌู ูุน ุงูู current_hash ููุณุฌู ุงูุณุงุจู
            if record[4] != prev_record[3]: 
                is_valid = False
                break
                
        self.assertTrue(is_valid, "ุฑุณุงูุฉ: โ ูุดู ูู ุงูุชูุงุนุจ ุฑุตุฏ ูุชู ูู REX-Ledger.")
        print("โ๏ธ test_3_rex_ledger_immutability (...ุงูุณุฌูุงุช ูู ุชูุงุนุจ ุฑุตุฏ ููุดู ุฃู ูุฌุจ) ... ok")


    def test_4_zcp_m3_isolation(self):
        """ุงุฎุชุจุงุฑ: ูุฌุจ ุนุฒู ุงููุนุงูุฌุฉ ุงูุนุงุฏูุฉ ููู ูุง ุชุคุซุฑ ุนูู ุฃู ูู ุงูููุงุฉ."""
        # ูุญุงูุงุฉ ุญุฏุซ ุฎุงุฑุฌู ูุง ุนูุงูุฉ ูู ุจุงูููุงุฉ
        record_and_hash_event("EXTERNAL_TRIGGER", "A simple external log entry", "INFO")
        
        # ูุฌุจ ุฃู ูููู ุงููุงุด ุงูุฃุฎูุฑ ูุฏ ุชุบูุฑ (ุฅุซุจุงุช ุงูุชุณุฌูู)
        new_hash = get_last_hash()
        self.assertIsNotNone(new_hash, "ุงููุงุด ูุง ูููู ุฃู ูููู ูุงุฑุบุงู")
        
        # ูุชุญูู ูู ุฃู ุชุณุฌูู ุญุฏุซ ุนุงุฏู ูุง ููุณุฑ ุงููุงุด ุดูู
        chain = get_ledger_contents()
        
        print("โ๏ธ test_4_zcp_m3_isolation (...ุงููุจุงุดุฑ ุงูุนุงุฏู ููู ูุง ุชุชุนุทู ุงูููุงุฉ) ... ok")

    
    def test_5_git_revert_mandate(self):
        """ุงุฎุชุจุงุฑ: ุงูุฐุงุชู ุงูุจูุงุก ูุถูุงู ู ูุณุฌูุฉ ููุฌูุฏุฉ (Revert) ุงูุชุฑุงุฌุน ุขููุฉ ุชููู ุฃู ูุฌุจ."""
        
        # ุชุณุฌูู ุญุฏุซ ุงูุชุฑุงุฌุน ุงูุฅูุฒุงูู
        record_and_hash_event("CORE_REVERT", "PMQE Failure Reverted to Last Stable Commit", "SUCCESS")
        
        # ูุฌุจ ุฃู ูููู ูุฐุง ุงูููุฏ ูู ุงูุฃุญุฏุซ 
        last_event = get_ledger_contents()[-1][2] # ุงูุญูููุฉ
        
        self.assertIn("CORE_REVERT", last_event, "ุงูุฅุฌุจุงุฑูุฉ ุงูุชุฑุงุฌุน ุนูููุฉ ุชุณุฌูู ูุชู ูู: ูุดู โ")
        
        print("โ๏ธ test_5_git_revert_mandate (...ุงูุฐุงุชู ุงูุจูุงุก ููุท ุนูุฏ ุงูุชููุงุฆู ุงูุชุฑุงุฌุน ุขููุฉ ุชูุนูู ูุฌุจ) ... ok")


if __name__ == '__main__':
    # ๐จ ุงูุชุนุฏูู ุงูุญุงุณู: ุฅุตูุงุญ SyntaxError ูู ุงูุณุทุฑ ุงูุฃุฎูุฑ
    unittest.main(exit=False)